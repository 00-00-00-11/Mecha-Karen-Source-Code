('GET FILE -1 INDEX ./')
@check => CUSTOM LANG
@check => TRUE ;
    PROCEED

\\# Comment
    LOADUP -> READ-ONLY --> EXECUTE
\\# Close Comment

{#CODE OPEN#}
@{#CODE OPEN#} ;
	DEF ENTIRE.BELOW() ;
		TRUE

#// FILE LOADUP READ LINE 55 + PASTE UNIT BELOW

"file lang" = CUSTOM : LOCAL UNIT (^)
"lang" = PYTHON 3.8.5 (LOCATE IN HYPER-VAR-EXT-SUB_VAR ["venv"])
"venv" = MAIN/SERVER_20/EXT/LOADUP/Seniatical/venv
CODE ^ = ^/LOAD ALL
{
IMPORT
REQUIRE MANUAL DOWNLOAD
MAY OR MAY NOT BE IN "venv" ~=>|<=~ ;
		{
	ALL IMPORTS EXCEPT FILES NOT PRESENT IN 
			{
        		"venv"
        		MUST DOWNLOAD
        		FROM COMMAND PYTHON38 "pip install (MOD)"
    		}
	}
#// FILE LOADUP READ LINE (55 + CODE ^) + STOP

##~BREAK

#// FILE LOADUP ASYNC UNIT >: FOLLOW LOGICAL + PASTE

END OF IMPORTS
    TOTAL :
        {
        14 LIBRARIES
        1 LOCAL LIBRARY
        34 EXT + REP + LOC LIBRARIES
    TOTAL = ^
    }
CREATE HYPER-VAR >= IMPORT-1

START CON-CURRENT UNIT CLASS (RUN-(EVENTS)-RUN)
MUST RUN IN-CURRENT. DIRECT NO END. >START - END<
    MOD : USED :
        {
        GET HYPER-VAR [IMPORT-1]
    }
#// FILE LOADUP READ LINE (GET(UNIT-LOCAL-CODE+2 ^) + CODE ^) + STOP

##~BREAK

#// FILE LOADUP ASYNC UNIT >: FOLLOW LOGICAL + PASTE

START CON-CURRENT UNIT CLASS (RUN-(COMMANDS)-RUN)
MUST RUN NON-CURRENT. DIRECT UNTIL END. >START - END< ;
	ON START +=- TRIGGER \ FALSE :
		{
		ON TRIGGER-EVENT ~# LOCAL - TRUE ;
			EVENT.LOAD(COMMANDS) ;
				EXECUTE => CODE(COMMANDS)
	}
		FOR ERROR IN TRIGGER-EVENT; {{CREATE HYPER-VAR [DASH]}IF DASH !-= RUNNING ;
								CODE.CLOSE = TRUE(COMMANDS - EVENT - VENV - SERVER)
								ALERT-DASH.CODE-404 ;
									MESSAGE = ('code closed. in the event of loading commands. The connection abruptly closed.')
							}
			{
			IF ERROR =}= GET HYPER-VAR [DASH] ~
				$COMMANDS.ERROR.DISPLAY$ ;
					RUN.CODE(EVENTS) :
						{
						USER.INPUT.DISPLAY.DISCORD +=) ERROR-HANDLING ;
							IF NOT IN ERROR-HANDLING ; {{CREATE HYPER-VAR [USER.INPUT.DISPLAY.ERROR.NAME [ERROR]]{HYPER-VAR.NAME {=} USER-ERROR}}
					}
					GET HYPER-VAR [DASH] ;
						FOR-LINE-ERROR IN DASH :
							{
							DASH.SEND-ERROR ;
								TRUE
							EXCEPT ANY-OTHER-ERROR IN GET HYPER-VAR [DASH] :
								{
								DASH.SEND-ERROR ;
									FALSE
							}
						}
		}
	{
	$COMMANDS.COMPLETE.DISPLAY.RESULTS$ [{==}] TRUE ;
		%ERROR.ERROR.NONE%. PRESENT :
			{
			PASS.COMMAND ;
				TRUE :
			NIL.ERROR$COMMANDS$ COMP==><==NIL.ERROR$COMMANDS$ ;
				GET HYPER-VAR [DASH]
				FROM DASH GET HYPER-VAR [ERROR]
				CALL-ERROR ;
					LOOP.PLAYBACK([:FUNC.EVAL(TRUE):].GET FUNC-HYPER-SUB-CODE{@LOOPER.TRUE(EXCEPT{ERROR}/PASS)})			
	{
		IF $COMMANDS$ IN COG ;
			REPEAT.PROCESS => TRUE ;
				RETURN RESULT ==><== FUNC.EVAL-CODE AS $COMMAND$.COG-REMOVE ; <TRUE>
		ON INSTANCE @=> RETURN.FALSE {==} TRUE ;
			1% - 1% GIVE RES = --<>-- ENCHANT.UPPER ~ CLASS ~ DIVMOD.HIGHER(CODEX.SERVER_20)
			}
	F-F + GET HYPER-VAR [ERROR] AS LOCAL-VAR [ERR]. FROM ERR PLAY LOOPBACK (_^_) ==> FOR CODE RUN TILL COMPLETION ;
		EXCEPT EXCEPT AS F ;
			PASS
		FOR ERR OF BREAK-ERROR :
			{
			GET HYPER-VAR [DASH]
			FROM HYPER-VAR [DASH] GET MIN-HYPER-VAR [ERROR];
				PLAY CODE(==) ;
					IF ERR IN ERROR;
						CODE.BREAK ; {TRUE[GET HYPER-VAR [DASH]]}
							DASH.BREAK {SEND.ERROR.VIA.MAIL}
							{
							IF MAIL.ERROR {RESPOND-904} ;
								CODE.RESTART :=[TRUE}
						{
						CODE.BREAK.TEMP-RESTART ; {TRUE[GET HYPER-VAR [DASH]]}
						GET - USER FROM USER.INPUT ;
							PRINT[ERR] + [GET - HYPER-VAR ERROR + DESC]
						FROM DESC PRINT DESCRIPTION :/< ==> ADVANCE / TRUE	
					}
						{
				FILE.INDEXED ===> TRUE ;
					IF INDEXED.ERROR-GET HYPER-VAR [DASH] @;
						GET SUP-HYPER-VAR [ERROR] {PASS.CONTENT AS NEW HYPER-VAR [SYNTAX]}
					FROM ERROR {EXT} GET SUB-PROCESS ~> HANDLER :
					{
					FILE.LOOP [ERROR-ERROR-HANDLER\\>CODE.PLAY({=>HAN-ER0-BOXED<=})]
					FILE.LOOP-COMPLETED -> + < ;@ TRUE ;@ {CLOSE-TRUE[FILE.ERROR-NAME}} ;
						TRUE ; 
							TRUE ;
								TRUE :
									{
									FILE.CLOSE() ==> NOW.()
								}
				}
		} 
		}
	}
    MOD : USED :
        {
        GET HYPER-VAR [IMPORT-1]
    }
#// FILE LOADUP READ LINE (GET(UNIT-LOCAL-CODE+2 ^) + CODE ^) + STOP

##~BREAK

#// FILE LOADUP ASYNC UNIT >: FOLLOW LOGICAL + PASTE

END OF CON-CURRENT UNIT CLASS (RUN-(EVENTS)-RUN)
MUST BE RUN IN-CURRENT. DIRECT NO END. >START - END<
EVEN END DEF (RUN) >: TRUE
    MOD : USED :
        {
        GET HYPER-VAR [IMPORT-1]
    }
PASS ANY-IF-FAILURE >;: PORT-888 + SERVER_20 MAIN DASH PANEL
#// FILE LOADUP READ LINE (GET(UNIT-LOCAL-CODE+2 ^) + CODE ^) + STOP

##~BREAK

#// FILE LOADUP ASYNC UNIT >: FOLLOW LOGICAL + PASTE

;;;
START BRACK LOAD 1
EXT SERVICE
CREATE HYPER-VAR BRACK
FOR WHEN HYPER-VAR "BRACK" MEN IN CODE (EXT OR IN) BRACK CODE + 1
    TEMP : {
        IF BRACK MENTION > EXT :
            {
        PASS CONTENT OF CON-CURRENT FILE
        ON TO MEN FILE OF EXT IN LOCAL
        ON LOCAL RETURN FALSE :
                {
            FILE.MAIN-LOAD GIST.RELOAD = TRUE
            ON RELOAD RETURN FALSE :
                    {
                    SHOW TRUE / SHOW MESH
                }
            }
        }
    }
#// FILE LOADUP READ LINE (GET(UNIT-LOCAL-CODE+2 ^) + CODE ^) + STOP

##~BREAK

#// FILE LOADUP ASYNC UNIT >: FOLLOW LOGICAL + PASTE

START BASE FUNCTION COMMANDS :
    {
    TRIGGER UPON BASE REACTION ;
        ERROR CODE 4206 ;
            EXCEPT PASS AS F
        IF PASS FOR ERROR-BASE IS =; F
        COMPLETE CODE :
            {
            TRUE
        }
        IFELSE PASS FOR ERROR-BASE IS =~ F
        COMPLETE CODE :
            {
            FALSE
            PASS FAILURE >;: PORT-888 + SERVER_20 MAIN DASH PANEL
        }
    FOR CON-CURRENT ERROR -> "bot.py".FILE RELOAD = TRUE
    PASS ANY EXCEPTIONS FROM :
        {
        CORE ;
            TRUE
        SERVER ;
            TRUE
        CLIENT ;
            FALSE
    }
}
#// FILE LOADUP READ LINE (GET(UNIT-LOCAL-CODE+2 ^) + CODE ^) + STOP

##~BREAK

#// FILE LOADUP ASYNC UNIT >: FOLLOW LOGICAL + PASTE

END OF COG LOADS
END OF COG:
            {
            LOAD
            UNLOAD
            RELOAD
        }
    (BRACK 3)
    PASS BRACK 2 ONTO BRACK 3 ;
        BRACK 3 LOCATE :
            {
            LINE FROM FILE 316 + BELOW ;
                ABOVE RETURN FALSE ;<
            BELOW RETURN TRUE
        }
#// FILE LOADUP READ LINE (GET(UNIT-LOCAL-CODE+2 ^) + CODE ^) + STOP

##~BREAK

#// FILE LOADUP ASYNC UNIT >: FOLLOW LOGICAL + PASTE

END BASE FUNCTION COMMANDS :
    {
    TURN DISCORD FILE MODE COG
    FOR COG IN SERVER_COG :
        {
        LOAD COG ;
            PASS PREV CONTEXT ON
        FOR ERROR ;
            RETURN ERROR ON HYPER-VAR "PANEL"
        FOR PASS-CONTENT ERROR ;
            RETURN FALSE
        FOR EXTENT-404 EROR ;
            RETURN FALSE
    }
    EXEMPT SERVER-ERROR
    [
    PANEL.CONNECT ;
        IF CONNECT # TRUE ;
            PASS
        IF CONNECT # FALSE ;
            PANEL.WARN.TRUE
]
}
#// FILE LOADUP READ LINE (GET(UNIT-LOCAL-CODE+2 ^) + CODE ^) + STOP

##~BREAK//CANCEL

IF FILE.COG.PRESENT ;
    TRUE :
        {
        FOR LINE-CODE IN CUR-FILE ;
        CON-CURRENT SERVER-FILE {LOAD} :
            {
            FROM MAIN.SERVER.CUSTOM.LOAD_BOOT-UP ;
                LOAD-UP STRATUS ;
                    FROM STRATUS BOOT-STL-G4S >;
                PASS ERROR-EXCEPT DUEL
            {SETUP}
            HYPER-FUNC-GET
        }
    }

REPEAT FOR FILE IN #./
IF FILE.ERROR PRESENT ;
    ERROR.DASH-BOARD.PRESENT ;
        TRUE
        {
        DASH-BOARD EXCEPT ERROR :
            {
            PRINT('ERROR')
        }
    }
CREATE.CON-CURRENT LOOP ;
    FOR FILE IN CODE

END FILE-CODE RUNNING() ;
    TRUE

{#CODE CLOSE#}

{#CODE OPEN#}

#~BREAK//UPPER-CLASS DIV ;
	CREATE.BOND() :
		{
		TRUE ;
			EXCEPT ANY PROB;
					.JFAX{<=DIVMODE.TRUE=>}
	}
	@BREAK ;
		LOAD CODE FROM {#GET-UPPER-CLASS DEF {--&CODE.GET-BELOW(TRUE)&}} ::
			{
			FROM START.LOAD {@CODE.OPEN.PASS.PASS-ON-CONTEXT@} ;
				GET HYPER-FUNC [{ENTIRE(TRUE)}]
			}
	DEF HYPER-FUNC-CLASS;EXCEPT.TRUE(<^>) {;:
		CODE.COPY.ABOVE.TRUE{PASS_CONTENT}
}
FUNC.NAME = "code-loader" 
IMPORTS = {GET HYPER-FUNC [code-loader], ;
	{
	GET HYPER-VAR [imports]
}
FROM [imports] GET (;}ALL{;) ~
	LOAD-ERROR ;
		DASH.PASS :
			{
			TRUE
		}
}
